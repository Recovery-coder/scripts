local currentfoods =""
local currentdrinks = ""

local foodP 
local drinkp 

--//spar values
local Sparlocation 




local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
local ScriptVersion = "0.0.1"
local player = game:GetService("Players").LocalPlayer
local speed = 100
local VirtualInputManager = game:GetService("VirtualInputManager")

local Window = Fluent:CreateWindow({
    Title = "rec.xyz " .. ScriptVersion,
    SubTitle = "by Recovery",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark"
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    AutoQuest = Window:AddTab({ Title = "AutoQuest", Icon = "newspaper" }),
    autospar = Window:AddTab({ Title = "Auto Spar", Icon = "grab" }),
    autoroad = Window:AddTab({ Title = "Auto Roadwork", Icon = "accessibility" }),
    Shadow = Window:AddTab({ Title = "Shadow Farm", Icon = "person-standing" }),
    AutoEat = Window:AddTab({ Title = "Auto Eat", Icon = "carrot" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "rotate-3d" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
--//spar
Tabs.autospar:AddButton({
        Title = "Set bag position",
        Description = "Make sure u set this before training.",
        Callback = function()
           Sparlocation = player.Character.HumanoidRootPart.Position
           print(Sparlocation)
        end
    })

local Keybind = Tabs.autospar:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })









local Toggle = Tabs.autospar:AddToggle("Spartoggle", {Title = "Toggle auto spar", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:", Options.Spartoggle.Value)
       while Options.Spartoggle.Value do
       local player = game.Players.LocalPlayer 
local character = player.Character
local hm = character.Humanoid
local hrp = character.HumanoidRootPart
local fist = player.Backpack:FindFirstChild("Fists")
local characterfist = character:FindFirstChild("Fists")
local sparr = player.Backpack:FindFirstChild("Spar Training")
for i,bags in pairs(workspace.Live:GetChildren()) do
if bags.Name == "Boxing Bag" then
local distance = (character.HumanoidRootPart.Position - bags.HumanoidRootPart.Position).Magnitude
if distance <= 6 and character:FindFirstChild("TRAINING_GLOVES [2372]") then 
hrp.CFrame = CFrame.lookAt(hrp.Position, Vector3.new(bags.HumanoidRootPart.Position.X, hrp.Position.Y, bags.HumanoidRootPart.Position.Z))
hm:EquipTool(fist)
VirtualInputManager:SendMouseButtonEvent(1, 1, 0, true, game, 1)
VirtualInputManager:SendMouseButtonEvent(1, 1, 0, false, game, 1)
else 
print("too far")
if Sparlocation == nill then
else
game.Players.LocalPlayer.Character.Humanoid:MoveTo(Sparlocation)
end
end
end
end

for i, spar in pairs(workspace.Game.Buyables:GetChildren()) do 
    if spar.Name == "Spar Training" then
        local distance = (character.HumanoidRootPart.Position - spar.Head.Position).Magnitude
        if distance <= 10 and character:FindFirstChild("TRAINING_GLOVES [2372]") then
            print(" gloves")
            print(distance)
        elseif distance <= 10 and not sparr and not character:FindFirstChild("TRAINING_GLOVES [2372]") then
            fireclickdetector(spar.Head.ClickDetector)
            task.wait(0.5)
            local sparr = player.Backpack:FindFirstChild("Spar Training") -- Assuming "sparr" is the tool you want to equip
            if sparr then
                hm:EquipTool(sparr)
                sparr:Activate()
                print("pollo")
           end 
        end
    end
end
task.wait()
end
        
        
        
        
    end)

    Options.Spartoggle:SetValue(false)














--//Roadwork
local RSpeed = 100
 local Slider = Tabs.autoroad:AddSlider("Slider", {
        Title = "Tween Speed",
        Description = "Change it if ur getting kicked.",
        Default = 100,
        Min = 1,
        Max = 200,
        Rounding = 0,
        Callback = function(Value)
            print("Slider was changed:", Value)
            RSpeed = Value
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(100)

Tabs.autoroad:AddButton({
        Title = "Roadwork Spot",
        Description = "Tweens you to the Roadwork.",
        Callback = function()
            Window:Dialog({
                Title = "Tween",
                Content = "Everyone will see this.",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
local char = game.Players.LocalPlayer.Character
local pos = Vector3.new(-521.0875244140625, 1228.923583984375, -521.6842651367188)
local hm = char.HumanoidRootPart
local dist = (hm.Position - pos).magnitude
local tweenspeed = dist/tonumber(RSpeed)
                          
                          print("Confirmed the dialog.")
                           tweenService, tweenInfo = game:GetService("TweenService"), TweenInfo.new(tweenspeed, Enum.EasingStyle.Linear)
                           tween = tweenService:Create(game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(-521.0875244140625, 1228.923583984375, -521.6842651367188)})
                            tween:Play()
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })


local Toggle = Tabs.autoroad:AddToggle("RoadToggle", {Title = "Toggle", Default = false })
function getroadwork()
local trainer = workspace.Game.NPCs["Muay Thai Trainer"].HumanoidRootPart.InteractPrompt
fireproximityprompt(trainer)
local args = {
    [1] = {
        ["choice"] = "Can you show me some of the avaliable trainings?"
    }
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Dialogue"):FireServer(unpack(args))
local args = {
    [1] = {
        ["choice"] = "Roadwork"
    }
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Dialogue"):FireServer(unpack(args))
local args = {
    [1] = {
        ["choice"] = "($45) Long Roadwork"
    }
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Dialogue"):FireServer(unpack(args))
local args = {
    [1] = {
        ["choice"] = "Exit"
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Dialogue"):FireServer(unpack(args))
end
    Toggle:OnChanged(function()
        print("Toggle changed:", Options.RoadToggle.Value)
       if Options.RoadToggle.Value then
       game.Players.LocalPlayer.Character.Humanoid.HipHeight = 4
       else
       game.Players.LocalPlayer.Character.Humanoid.HipHeight = 0
       end
       
       while Options.RoadToggle.Value do
        local char = game.Players.LocalPlayer.Character
local pos = Vector3.new(-521.0875244140625, 1228.923583984375, -521.6842651367188)
local hm = char.HumanoidRootPart
local dist = (hm.Position - pos).magnitude
local tweenspeed = dist/tonumber(RSpeed)
        
        local folder = game:GetService("Players").LocalPlayer.PlayerGui.TrainingGuis
       if #folder:GetChildren() == 0 then
         tweenService, tweenInfo = game:GetService("TweenService"), TweenInfo.new(tweenspeed, Enum.EasingStyle.Linear)
                           tween = tweenService:Create(game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(-521.0875244140625, 1228.923583984375, -521.6842651367188)})
                            tween:Play()
        print("hello")
        getroadwork()
    end
       
       
        for i,v in pairs(workspace.Game.Markers:GetChildren()) do
        local char = game.Players.LocalPlayer.Character
local pos = Vector3.new(v.Position)
local hm = char.HumanoidRootPart
local dist = (hm.Position - pos).magnitude
local tweenspeed = dist/tonumber(RSpeed)
local Speed = 70
function GetTime(Distance, Speed)
	-- Time = Distance / Speed
	local Time = Distance / Speed
	return Time
end
local Distance = (player.Character.PrimaryPart.Position - v.Position).magnitude -- Get the distance between the current position and the next node
local Time = GetTime(Distance, Speed) -- Calculate the time


game:GetService("Players").LocalPlayer.Character.Humanoid:ChangeState(11)
                         tweenService, tweenInfo = game:GetService("TweenService"), TweenInfo.new(Time, Enum.EasingStyle.Linear)
              tween = tweenService:Create(game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(v.Position)})
                          tween:Play()
                           
                          local playbackState = tween.Completed:Wait()
                          print("going")
                          end
                     
                     
                    
                         
       task.wait()
        end 
    end)
 Options.RoadToggle:SetValue(false)




--//Quest tab -672.6984252929688, 1230.419189453125, -817.7157592773438
 
 Tabs.AutoQuest:AddButton({
        Title = "Quest Spot",
        Description = "Tweens you to the quest.",
        Callback = function()
            Window:Dialog({
                Title = "Tween",
                Content = "Everyone will see this.",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
local char = game.Players.LocalPlayer.Character
local pos = Vector3.new(-672.6984252929688, 1230.419189453125, -817.7157592773438)
local hm = char.HumanoidRootPart
local dist = (hm.Position - pos).magnitude
local tweenspeed = dist/tonumber(speed)
                          
                          print("Confirmed the dialog.")
                           tweenService, tweenInfo = game:GetService("TweenService"), TweenInfo.new(tweenspeed, Enum.EasingStyle.Linear)
                           tween = tweenService:Create(game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(-672.6984252929688, 1230.419189453125, -817.7157592773438)})
                            tween:Play()
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })
    local Slider = Tabs.AutoQuest:AddSlider("Slider", {
        Title = "Tween Speed",
        Description = "Change it if ur getting kicked.",
        Default = 100,
        Min = 1,
        Max = 100,
        Rounding = 0,
        Callback = function(Value)
            print("Slider was changed:", Value)
            speed = Value
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(100)
    
   local Toggle = Tabs.AutoQuest:AddToggle("MyToggles", {Title = "Toggle AutoQuest", Default = false })

   
   
    
    
    Toggle:OnChanged(function()
    tweenService, tweenInfo = game:GetService("TweenService"), TweenInfo.new(1, Enum.EasingStyle.Linear)
  print("Toggle changed:", Options.MyToggles.Value)
  local player = game.Players.LocalPlayer
local bodyvelocityenabled = true -- set this to false if you are getting kicked
local Imput = game:GetService("UserInputService")
local Plr = game.Players.LocalPlayer
local Mouse = Plr:GetMouse()
local tweenpart = game.Workspace.Game.Buyables["Cola"].Head.Position
local player = game.Players.LocalPlayer
local currentquest = player.PlayerGui.QuestGui.Stuff.ActiveQuest.Value

--/////////////
function getquest(Quest)
for i,v in pairs(game.workspace.Game.Questboards:GetDescendants()) do
if v:FindFirstChild("ClickDetector") then
v.ClickDetector.MaxActivationDistance = 999999999999999
task.wait(0)
fireclickdetector(v.ClickDetector)
end
end
end

while Options.MyToggles.Value do
local player = game.Players.LocalPlayer
local currentquest = player.PlayerGui.QuestGui.Stuff.QuestObjective.Value
local ActiveQuest = player.PlayerGui.QuestGui.Stuff.ActiveQuest.Value
if currentquest == "Decorate the city with 5 posters" and ActiveQuest == "Stylist" then
for i,v in pairs(workspace.Game.Minimal_Quest_Objects.Posters:GetChildren()) do
if (player.Character.HumanoidRootPart.Position - v.Position).Magnitude <= 100 then
if v.Decal.Transparency == 1 then
tween = tweenService:Create(game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart, tweenInfo, {CFrame = CFrame.new(v.Position)})
tween:Play()
fireproximityprompt(v.ProximityPrompt)
end
end
end
else 
game:GetService("ReplicatedStorage"):WaitForChild("Cancel"):FireServer()
wait(0.1)
getquest()


end
wait()
end

    end)
Options.MyToggles:SetValue(false)

--///Shadow Farm
local Toggle = Tabs.Shadow:AddToggle("Shadow1", {Title = "Auto shadow buy", Default = false })

    Toggle:OnChanged(function()
  print("Toggle changed:", Options.Shadow1.Value)

while Options.Shadow1.Value do
local shadow = player.Backpack:FindFirstChild("Shadow Training")
if shadow then
player.Character.Humanoid:EquipTool(shadow)
shadow:Activate()
task.wait(36)
else
print("not foundd")
fireclickdetector(game.Workspace.Game.Buyables["Shadow Training1"].Head.ClickDetector)
end
wait()
end
    end)

    Options.Shadow1:SetValue(false)
local Toggle = Tabs.Shadow:AddToggle("Shadow2", {Title = "Auto shadow hit", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:", Options.Shadow2.Value)
        function followshadow()
local player = game.Players.LocalPlayer
local hm = player.Character.HumanoidRootPart
local Combat = player.Backpack:FindFirstChild("Fists")
player.Character.Humanoid:EquipTool(Combat)
for i,p in pairs(game.workspace.Live:GetChildren()) do
if p.Name == "Shadow." then
if p:WaitForChild("HumanoidRootPart") then
print(p.HumanoidRootPart)
hm.CFrame = CFrame.lookAt(hm.Position, Vector3.new(p.HumanoidRootPart.Position.X, hm.Position.Y, p.HumanoidRootPart.Position.Z))
end
end
end
end
while Options.Shadow2.Value do
followshadow()
task.wait()
end
    end)

    Options.Shadow2:SetValue(false)
   
   
   
--///misc
 Tabs.Misc:AddParagraph({
        Title = "Vip Server",
        Content = ""
    })
 Tabs.Misc:AddButton({
        Title = "Vip Platform",
        Description = "Spawns a platform where u can train, In a vip server.",
        Callback = function()
         local part = Instance.new("Part")
part.Name = "vip platform"
part.Size = Vector3.new(1525.39990234375, 2, 1174.0999755859375)
part.Position = Vector3.new(-157.70355224609375, 1224.9239501953125, -664.3065795898438)
part.Anchored = true
part.BrickColor = BrickColor.new("Crimson")
part.Material = "Neon"
part.Transparency = 0.5
part.Parent = workspace   
        end
    })
Tabs.Misc:AddButton({
        Title = "Tp to platform",
        Description = "Takes you there...",
        Callback = function()
         local hm = player.Character.HumanoidRootPart
         local portal = workspace.Game.TP_Things.GangBase["1"]
         portal.CFrame = hm.CFrame*CFrame.new(Vector3.new(hm.CFrame,0,-10))
        end
    })  
    
    
--/// auto eat
    local MultiDropdown = Tabs.AutoEat:AddDropdown("MultiDropdown", {
        Title = "Auto Eat",
        Description = "You can select multiple Foods.",
        Values = {"Hotdog", "Chips", "Chocolate Donut", "Ramen", "Fried Rice", "Rice Balls", "Chocolate Glazed Donut", "Pizza", "Meatballs", "Protein Bar", "Pretzel"},
        Multi = true,
        Default = {},
    })


    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
        currentfoods = Values
    end)
  local Slider = Tabs.AutoEat:AddSlider("Slider", {
        Title = "Hunger %",
        Default = 50,
        Min = 1,
        Max = 100,
        Rounding = 0,
        Callback = function(Value)
            print("Slider was changed:", Value)
            foodP = Value
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
       
    end)
    
    
    local Toggle = Tabs.AutoEat:AddToggle("FoodToggle", {Title = "Toggle", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:", Options.FoodToggle.Value)
while Options.FoodToggle.Value do
local hungerGui = game.Players.LocalPlayer.PlayerGui.MainUI.Frame.HungerFront
local guiSize2 = hungerGui.Size
local originalWidth = 0.620999992
local widthPercentage = (guiSize2.X.Scale / originalWidth) * 100
local roundedWidthPercentage = math.round(widthPercentage)
print(roundedWidthPercentage)
if roundedWidthPercentage <= foodP then
for _, FoodName in pairs(currentfoods) do
    local food = player.Backpack:FindFirstChild(FoodName) or player.Character:FindFirstChild(FoodName)
    if food then
        local hm = player.Character.Humanoid
        hm:EquipTool(food)
        food:Activate()
        break -- Exit the loop after equipping and activating the first valid drink
    end
end
end   
wait()
end
    end)

    Options.FoodToggle:SetValue(false)

local MultiDropdown = Tabs.AutoEat:AddDropdown("MultiDropdown", {
        Title = "Auto Drink",
        Description = "You can select multiple Drinks.",
        Values = {"Cola", "Sports Drink", "Vanilla Icecream", "Strawberry Icecream"},
        Multi = true,
        Default = {},
    })


    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
        currentdrinks = Values
    end)   
 local Slider = Tabs.AutoEat:AddSlider("Slider", {
    Title = "Thirst %",
    Default = 50,
    Min = 1,
    Max = 100,
    Rounding = 0,
    Callback = function(Value)
        print("Slider was changed:", Value)
        drinkp = Value
    end
})

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)
     
     
     local Toggle = Tabs.AutoEat:AddToggle("DrinkToggle", {Title = "Toggle", Default = false })

    Toggle:OnChanged(function()
      print("Toggle changed:", Options.DrinkToggle.Value)
while Options.DrinkToggle.Value do
local drinkGui = game.Players.LocalPlayer.PlayerGui.MainUI.Frame.WaterFront
local guiSize2 = drinkGui.Size
local originalWidth = 0.620999992
local widthPercentage = (guiSize2.X.Scale / originalWidth) * 100
local roundedWidthPercentage = math.round(widthPercentage)
print(roundedWidthPercentage)
if roundedWidthPercentage <= tonumber(drinkp) then
for _, drinkName in pairs(currentdrinks) do
    local drink = player.Backpack:FindFirstChild(drinkName) or player.Character:FindFirstChild(drinkName)
    if drink then
        local hm = player.Character.Humanoid
        hm:EquipTool(drink)
        drink:Activate()
        break -- Exit the loop after equipping and activating the first valid drink
    end
end
end
wait()
end

    end)
 Options.DrinkToggle:SetValue(false)

   
   
   
   
   
   
   
   Fluent:Notify({
        Title = "Notification",
        Content = "Welcome"  ,
        SubContent = player.Name , -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })



    Tabs.Main:AddParagraph({
        Title = "Paragraph",
        Content = "This is a paragraph.\nSecond line!"
    })



    Tabs.Main:AddButton({
        Title = "Button",
        Description = "Very important button",
        Callback = function()
        print("hi")
        end
    })






    
    local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Slider",
        Description = "This is a slider",
        Default = 2,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Callback = function(Value)
            print("Slider was changed:", Value)
        end
    })

    Slider:OnChanged(function(Value)
        print("Slider changed:", Value)
    end)

    Slider:SetValue(3)



    local Dropdown = Tabs.Main:AddDropdown("Dropdown", {
        Title = "Dropdown",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = false,
        Default = 1,
    })

    Dropdown:SetValue("four")

    Dropdown:OnChanged(function(Value)
        print("Dropdown changed:", Value)
    end)


    
    local MultiDropdown = Tabs.Main:AddDropdown("MultiDropdown", {
        Title = "Dropdown",
        Description = "You can select multiple values.",
        Values = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen"},
        Multi = true,
        Default = {"seven", "twelve"},
    })

    MultiDropdown:SetValue({
        three = true,
        five = true,
        seven = false
    })

    MultiDropdown:OnChanged(function(Value)
        local Values = {}
        for Value, State in next, Value do
            table.insert(Values, Value)
        end
        print("Mutlidropdown changed:", table.concat(Values, ", "))
    end)



    local Colorpicker = Tabs.Main:AddColorpicker("Colorpicker", {
        Title = "Colorpicker",
        Default = Color3.fromRGB(96, 205, 255)
    })

    Colorpicker:OnChanged(function()
        print("Colorpicker changed:", Colorpicker.Value)
    end)
    
    Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))



    local TColorpicker = Tabs.Main:AddColorpicker("TransparencyColorpicker", {
        Title = "Colorpicker",
        Description = "but you can change the transparency.",
        Transparency = 0,
        Default = Color3.fromRGB(96, 205, 255)
    })

    TColorpicker:OnChanged(function()
        print(
            "TColorpicker changed:", TColorpicker.Value,
            "Transparency:", TColorpicker.Transparency
        )
    end)



    local Keybind = Tabs.Main:AddKeybind("Keybind", {
        Title = "KeyBind",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "LeftControl", -- String as the name of the keybind (MB1, MB2 for mouse buttons)

        -- Occurs when the keybind is clicked, Value is `true`/`false`
        Callback = function(Value)
            print("Keybind clicked!", Value)
        end,

        -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })

    -- OnClick is only fired when you press the keybind and the mode is Toggle
    -- Otherwise, you will have to use Keybind:GetState()
    Keybind:OnClick(function()
        print("Keybind clicked:", Keybind:GetState())
    end)

    Keybind:OnChanged(function()
        print("Keybind changed:", Keybind.Value)
    end)

    task.spawn(function()
        while true do
            wait(1)

            -- example for checking if a keybind is being pressed
            local state = Keybind:GetState()
            if state then
                print("Keybind is being held down")
            end

            if Fluent.Unloaded then break end
        end
    end)

    Keybind:SetValue("MB2", "Toggle") -- Sets keybind to MB2, mode to Hold


    local Input = Tabs.Main:AddInput("Input", {
        Title = "Input",
        Default = "Default",
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            print("Input changed:", Value)
        end
    })

    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(2)

Fluent:Notify({
    Title = "rec.xyz",
    Content = "The script has been loaded.",
    Duration = 4
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
